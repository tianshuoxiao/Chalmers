classdef VideoWindow < handle
    %UNTITLED Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        vid
        vid_Nframes
        buffer
        bufferSize = 60 % needs to be odd in order to have the currentFrame in the center
        
        H_mainWindow
        H_videoWindow
        
        H_playerControlWindow
        H_playButton
        H_stopButton
        H_slider
        H_SyncModeControl
        H_CurrentFrame
        H_RotateView
        H_activateZoom
        frameBuffered
        
        parentObj
        loaded = false;
    end
    
    properties (SetObservable)%, AbortSet)
        currentFrame
    end
    
    events
        moveForward
        moveBackward
        play_video
    end
    
    methods %(Access = ?VideoController)
        
        % CONSTRUCTOR
        function VP = VideoWindow(VC, videoFile)
            
            VP.parentObj = VC;
            
            if ~isempty(videoFile)
                VP.currentFrame = VC.currentFrame;
                VP.vid = VideoReader(videoFile);
                
                VP.vid_Nframes = VP.vid.NumberOfFrames;
                
                Init(VP);
                BufferFrames(VP);
                ShowFrames(VP);
                
                VP.loaded = true;
            else
                
            end
            
            %To sync this pbject with the main controller
            addlistener(VP.parentObj, 'updateFrame_global_forward', @VP.c_moveForward);
            addlistener(VP.parentObj, 'updateFrame_global_backward', @VP.c_moveBackward);
            
        end
        
        function Init(VP)
            
            VP.H_mainWindow = figure('units', 'pixel',...
                'position', [50, 50, VP.vid.width, VP.vid.height],...
                'resize', 'on',...
                'MenuBar','none',...
                'toolbar','figure', ...
                'NumberTitle', 'off',...
                'renderer','painters', ...
                'name', 'Video Window',...
                'tag','Video Window',...
                'doublebuffer','off',...
                ...'HandleVisibility','callback',...
                ...'Interruptible', 'off',...
                ...'busyaction', 'cancel',...
                'GraphicsSmoothing','off',...
                ...'SizeChangedFcn',@VP.resizeFcn,...
                'WindowScrollWheelFcn',[],...
                'KeyPressFcn', @VP.scrollFrameKey,...
                'visible', 'off',...
                'closeRequestFcn', []);
            
            VP.H_videoWindow = axes('parent', VP.H_mainWindow,...
                ...'Clipping', 'off',...
                'projection', 'orthographic',...
                'units', 'normalized',...
                'position', [0 0 1 1],...
                'XTick', [],...
                'YTick', [],...
                'YDir','reverse',...
                'XtickLabel', [],...
                'YtickLabel', [], ...
                'Box', 'on',...
                'XGrid', 'off', ...
                'YGrid', 'off', ...
                'xcolor', 'none',...
                'ycolor', 'none',...
                'PlotBoxAspectRatioMode', 'manual', ...
                'PlotBoxAspectRatio', [1 1 1],...
                'DataAspectRatioMode', 'manual',...
                'DataAspectRatio', [1 1 1],...
                'fontsmoothing', 'off',...
                'Interruptible', 'off',...
                'busyaction', 'cancel',...
                'xlim', [0 VP.vid.width] + 0.5,...
                'ylim', [0 VP.vid.height] + 0.5,...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual',...
                'visible', 'off');
            colormap( VP.H_videoWindow, 'gray')
            

            
            VP.H_playerControlWindow = uiflowcontainer('v0', 'parent', VP.H_mainWindow,...
                'units', 'pixel',...
                'flowdirection', 'LeftToRight',...
                'position', [0, 0, 200, 25],...
                'tag', 'playerControl');
            
            %             VP.H_SyncModeControl = uicontrol('parent', VP.H_playerControlWindow,...
            %                 'units', 'pixels', ...
            %                 'style', 'checkbox', ...
            %                 'value', 0,...
            %                 'string', 'Sync mode',...
            %                 'callback', []);
            
            VP.H_CurrentFrame = uicontrol('parent', VP.H_playerControlWindow,...
                'units', 'characters', ...
                'style', 'text', ...
                'horizontalalignment', 'center',...
                'string', VP.currentFrame,...
                ...'backgroundcolor', 'none',...
                'fontsize', 8,...
                'callback', []);
            
            %             VP.H_RotateView = uicontrol('parent', VP.H_playerControlWindow,...
            %                 'units', 'pixels', ...
            %                 'style', 'pushbutton', ...
            %                 'string', 'Rotate',...
            %                 'fontsize', 8,...
            %                 'callback', @VP.rotateFrame);
            %             VP.H_activateZoom = uicontrol('parent', VP.H_playerControlWindow,...
            %                 'units', 'pixels', ...
            %                 'style', 'checkbox', ...
            %                 'string', 'Zoom',...
            %                 'fontsize', 8,...
            %                 'callback', @VP.activateZoom);
        end
        
%         function rotateFrame(VP, ~, ~)
%             currentView = VP.H_videoWindow.View;
%             currentView(1) = currentView(1) + 90;
%             VP.H_videoWindow.View = currentView;
%         end
        
        %         function activateZoom(VP, src, ~)
        %             if src.Value
        %                 h = zoom;
        %                 h.ActionPreCallback = @myprecallback;
        %                 h.ActionPostCallback = @mypostcallback;
        %                 h.Enable = 'on';
        %             else
        %                 h = zoom;
        %                 h.Enable = 'off';
        %             end
        %
        %             function myprecallback(obj,evd)
        %                 disp('A zoom is about to occur.');
        %             end
        %
        %             function mypostcallback(obj,evd)
        %                 newLim = VP.H_videoWindow.XLim;
        %             end
        %         end
        %         function resizeFcn(VP, ~, ~)
        %             pause(0.05)
        %             try
        %                 aspectRatio = VP.vid.width/VP.vid.height;
        %
        %                 figpos = get(VP.H_mainWindow, 'position');
        %                 figpos(3) = figpos(4) * aspectRatio;
        %
        %                 panelPos = [0, 0, figpos(3), 25];
        %                 set(VP.H_mainWindow, 'position', figpos);
        %
        %                 set(VP.H_playerControlWindow, 'Position', panelPos);
        %             catch
        %                 return
        %             end
        %             drawnow nocallbacks limitrate
        %         end
        
        function c_moveForward(VP, ~, ~)
            if isvalid(VP)
                VP.currentFrame = VP.parentObj.currentFrame;
                
                if (VP.currentFrame >= VP.frameBuffered(end))
                    RefreshBuffer_forward(VP)
                end
                
                VP.ShowFrames()
            end
        end
        
        function c_moveBackward(VP, ~, ~)
            if isvalid(VP)
                VP.currentFrame = VP.parentObj.currentFrame;
                
                if (VP.currentFrame <= VP.frameBuffered(1))
                    RefreshBuffer_backward(VP)
                end
                
                VP.ShowFrames()
            end
        end
        
        function BufferFrames(VP)
            VP.frameBuffered = [max(VP.currentFrame - floor(VP.bufferSize/2), 1),...
                min(VP.currentFrame + floor(VP.bufferSize/2), VP.vid_Nframes)];
            
            VP.buffer = read(VP.vid, [VP.frameBuffered(1), VP.frameBuffered(end)]);
            pause(0.01)
        end
        
        function RefreshBuffer_forward(VP)
            
            if VP.currentFrame == VP.vid_Nframes
                return
            end
            
            VP.frameBuffered = [max(VP.frameBuffered(end) - floor(VP.bufferSize/2), 1),...
                min(VP.frameBuffered(end) + floor(VP.bufferSize/2),VP.vid_Nframes) ];
            
            newFrames = read(VP.vid, [VP.currentFrame + 1,...
                min(VP.currentFrame + floor(VP.bufferSize/2), VP.vid_Nframes)]);
            
            VP.buffer = cat(4, VP.buffer(:,:,:,end-floor(VP.bufferSize/2):end), newFrames);
        end
        
        function RefreshBuffer_backward(VP)
            
            if VP.currentFrame == 1
                return
            end
            
            VP.frameBuffered = [max(VP.frameBuffered(1) - floor(VP.bufferSize/2), 1),...
                min(VP.frameBuffered(1) + floor(VP.bufferSize/2), VP.vid_Nframes)];
            
            newFrames = read(VP.vid, [max(VP.currentFrame - floor(VP.bufferSize/2), 1),...
                VP.currentFrame - 1]);
            
            VP.buffer = cat(4, newFrames, VP.buffer(:,:,:,1:1+floor(VP.bufferSize/2)));
        end
        
        function ShowFrames(VP)
            iFrame = VP.currentFrame == [VP.frameBuffered(1) : VP.frameBuffered(end)];
            
            % If the new frame is outside the sliding window, then the
            % buffer is reinitialized.
            if all(~iFrame)
                VP.BufferFrames
                iFrame = VP.currentFrame == [VP.frameBuffered(1) : VP.frameBuffered(end)];
            end
            
            %             oldXlim = [];
            %             oldYlim = [];
            %
            %             if VP.H_videoWindow.XLim(2) ~= 1 % when initialize the axes is [0 1], that means 1 pixel wide when I load an image
            %                 oldXlim =  VP.H_videoWindow.XLim;
            %                 oldYlim =  VP.H_videoWindow.YLim;
            %             end
            
%             currentViewAngle = VP.H_videoWindow.View;
%             
            xLim = get(VP.H_videoWindow, 'xlim');
            yLim = get(VP.H_videoWindow, 'ylim');
            
            xLim(1) = max(xLim(1), 0);
            yLim(1) = max(yLim(1), 0);
            
            xLim(2) = min(xLim(2), VP.vid.width);
            yLim(2) = min(yLim(2), VP.vid.height);
            
            frame = VP.buffer(:,:,:, iFrame);
            
            frameSize = size(frame);
            
            image(frame,...
                'BusyAction', 'cancel', ...
                'CDataMapping', 'scaled', ...
                'Interruptible', 'off',...
                'Parent', VP.H_videoWindow);
            
            %             set(VP.H_videoWindow, 'Units', 'normalized',...
            %                 'DataAspectRatio', [1 1 1],...
            %                 'DataAspectRatiomode', 'manual',...
            %                 'xtick', [],...
            %                 'ytick', [],...
            %                 'color', 'none',...
            %                 'xcolor', 'none',...
            %                 'ycolor', 'none',...
            %                 'fontsmoothing', 'off',...
            %                 'box', 'off')
            
            set(VP.H_videoWindow,'units', 'normalized',...
                ... 'Clipping', 'off',...
                'projection', 'orthographic',...
                'position', [0 0 1 1],...
                'XTick', [],...
                'YTick', [],...
                'YDir','reverse',...
                'XtickLabel', [],...
                'YtickLabel', [], ...
                'Box', 'on',...
                'XGrid', 'off', ...
                'YGrid', 'off', ...
                'xcolor', 'none',...
                'ycolor', 'none',...
                'PlotBoxAspectRatioMode', 'manual', ...
                'PlotBoxAspectRatio', [1 1 1],...
                'DataAspectRatioMode', 'manual',...
                'DataAspectRatio', [1 1 1],...
                'fontsmoothing', 'off',...
                'Interruptible', 'off',...
                'busyaction', 'cancel',...
                ...'xlim', [0 VP.vid.width] + 0.5,...
                ...'ylim', [0 VP.vid.height] + 0.5,...
                'xlimmode','manual',...
                'ylimmode','manual',...
                'zlimmode','manual',...
                'climmode','manual',...
                'alimmode','manual')
            
            
            %             if ~isempty(oldXlim)
            %                 VP.H_videoWindow.XLim = oldXlim;
            %                 VP.H_videoWindow.YLim = oldYlim;
            %             end
            
            if (diff(xLim) ~= frameSize(2)) || (diff(yLim) ~= frameSize(1))
                set(VP.H_videoWindow, ...
                    'xlim', xLim,...
                    'ylim', yLim)
            end
            
%             VP.H_videoWindow.View = currentViewAngle;
            
            set(VP.H_videoWindow, 'Units', 'normalized',...
                'DataAspectRatiomode', 'manual')
            
            VP.H_videoWindow.Visible = 'off';
            VP.H_CurrentFrame.String = num2str(VP.currentFrame);
            
            drawnow nocallbacks limitrate
            
        end
        
        
        function scrollFrameWheel(VP, ~, eventData)
            if eventData.VerticalScrollCount > 0
                VP.parentObj.notify_frame_changed_forward
            else
                VP.parentObj.notify_frame_changed_backward
            end
        end
        
        function scrollFrameKey(VP, ~, eventData)
            switch (eventData.Key)
                case 'rightarrow'
                    VP.parentObj.notify_frame_changed_forward
                case 'leftarrow'
                    VP.parentObj.notify_frame_changed_backward
            end
        end
        
    end
    
end

